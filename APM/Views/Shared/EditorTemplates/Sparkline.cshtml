@model double?
@{
    string Format = "n" + (int)ViewData["DigitsAfterDecimal"];
    int Decimals = (int)ViewData["DigitsAfterDecimal"];
    string FieldName = (string)ViewData["FieldName"] == "شناسه" ? (string)ViewData["FieldName"] + "_" + (string)ViewData["DataKey"] : (string)ViewData["FieldName"];
    double Value = ViewData["FieldValue"] == null ? 0 : (ViewData["FieldValue"].ToString() == "" ? 0 : (Double.Parse(ViewData["FieldValue"].ToString(), System.Globalization.CultureInfo.InvariantCulture)));
    double MaxValue = ViewData["MaxValue"] == null ? double.MaxValue : double.Parse(ViewData["MaxValue"].ToString(), System.Globalization.CultureInfo.InvariantCulture);
    double MinValue = ViewData["MinValue"] == null ? double.MinValue : double.Parse(ViewData["MinValue"].ToString(), System.Globalization.CultureInfo.InvariantCulture);
}
@if (!(bool)ViewData["IsReadonly"] && (bool)ViewData["IsRequired"])
{
    @(Html.Kendo().NumericTextBoxFor(m => m)
        .Name(@FieldName)
        .Enable(!(bool)ViewData["IsReadonly"])
        .Min(MinValue)
        .Max(MaxValue)
        .Decimals(@Decimals)
        .Format(@Format)
        .Value(Value)
        .HtmlAttributes(new { @class = "Numeric", required = "required", validationMessage = "ورود داده الزامی است", autocomplete = "off" })
    )
}
else
{
    @(Html.Kendo().NumericTextBoxFor(m => m)
        .Name(@FieldName)
        .Enable(!(bool)ViewData["IsReadonly"])
        .Min(MinValue)
        .Max(MaxValue)
        .Decimals(@Decimals)
        .Format(@Format)
        .Value(Value)
        .HtmlAttributes(new { @class = "Numeric", autocomplete = "off" })
    )
} 